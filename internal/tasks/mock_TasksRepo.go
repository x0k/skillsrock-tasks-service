// Code generated by mockery. DO NOT EDIT.

package tasks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockTasksRepo is an autogenerated mock type for the TasksRepo type
type MockTasksRepo struct {
	mock.Mock
}

type MockTasksRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTasksRepo) EXPECT() *MockTasksRepo_Expecter {
	return &MockTasksRepo_Expecter{mock: &_m.Mock}
}

// AllTasks provides a mock function with given fields: ctx
func (_m *MockTasksRepo) AllTasks(ctx context.Context) ([]Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllTasks")
	}

	var r0 []Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTasksRepo_AllTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllTasks'
type MockTasksRepo_AllTasks_Call struct {
	*mock.Call
}

// AllTasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTasksRepo_Expecter) AllTasks(ctx interface{}) *MockTasksRepo_AllTasks_Call {
	return &MockTasksRepo_AllTasks_Call{Call: _e.mock.On("AllTasks", ctx)}
}

func (_c *MockTasksRepo_AllTasks_Call) Run(run func(ctx context.Context)) *MockTasksRepo_AllTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTasksRepo_AllTasks_Call) Return(_a0 []Task, _a1 error) *MockTasksRepo_AllTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTasksRepo_AllTasks_Call) RunAndReturn(run func(context.Context) ([]Task, error)) *MockTasksRepo_AllTasks_Call {
	_c.Call.Return(run)
	return _c
}

// FindTasks provides a mock function with given fields: ctx, filter
func (_m *MockTasksRepo) FindTasks(ctx context.Context, filter TasksFilter) ([]Task, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindTasks")
	}

	var r0 []Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, TasksFilter) ([]Task, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, TasksFilter) []Task); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, TasksFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTasksRepo_FindTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTasks'
type MockTasksRepo_FindTasks_Call struct {
	*mock.Call
}

// FindTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - filter TasksFilter
func (_e *MockTasksRepo_Expecter) FindTasks(ctx interface{}, filter interface{}) *MockTasksRepo_FindTasks_Call {
	return &MockTasksRepo_FindTasks_Call{Call: _e.mock.On("FindTasks", ctx, filter)}
}

func (_c *MockTasksRepo_FindTasks_Call) Run(run func(ctx context.Context, filter TasksFilter)) *MockTasksRepo_FindTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(TasksFilter))
	})
	return _c
}

func (_c *MockTasksRepo_FindTasks_Call) Return(_a0 []Task, _a1 error) *MockTasksRepo_FindTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTasksRepo_FindTasks_Call) RunAndReturn(run func(context.Context, TasksFilter) ([]Task, error)) *MockTasksRepo_FindTasks_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOverdueTasksWithDueDateBefore provides a mock function with given fields: ctx, date
func (_m *MockTasksRepo) RemoveOverdueTasksWithDueDateBefore(ctx context.Context, date time.Time) error {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOverdueTasksWithDueDateBefore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = rf(ctx, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOverdueTasksWithDueDateBefore'
type MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call struct {
	*mock.Call
}

// RemoveOverdueTasksWithDueDateBefore is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *MockTasksRepo_Expecter) RemoveOverdueTasksWithDueDateBefore(ctx interface{}, date interface{}) *MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call {
	return &MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call{Call: _e.mock.On("RemoveOverdueTasksWithDueDateBefore", ctx, date)}
}

func (_c *MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call) Run(run func(ctx context.Context, date time.Time)) *MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call) Return(_a0 error) *MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call) RunAndReturn(run func(context.Context, time.Time) error) *MockTasksRepo_RemoveOverdueTasksWithDueDateBefore_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTaskById provides a mock function with given fields: ctx, id
func (_m *MockTasksRepo) RemoveTaskById(ctx context.Context, id TaskId) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTaskById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, TaskId) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTasksRepo_RemoveTaskById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTaskById'
type MockTasksRepo_RemoveTaskById_Call struct {
	*mock.Call
}

// RemoveTaskById is a helper method to define mock.On call
//   - ctx context.Context
//   - id TaskId
func (_e *MockTasksRepo_Expecter) RemoveTaskById(ctx interface{}, id interface{}) *MockTasksRepo_RemoveTaskById_Call {
	return &MockTasksRepo_RemoveTaskById_Call{Call: _e.mock.On("RemoveTaskById", ctx, id)}
}

func (_c *MockTasksRepo_RemoveTaskById_Call) Run(run func(ctx context.Context, id TaskId)) *MockTasksRepo_RemoveTaskById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(TaskId))
	})
	return _c
}

func (_c *MockTasksRepo_RemoveTaskById_Call) Return(_a0 error) *MockTasksRepo_RemoveTaskById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTasksRepo_RemoveTaskById_Call) RunAndReturn(run func(context.Context, TaskId) error) *MockTasksRepo_RemoveTaskById_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTask provides a mock function with given fields: ctx, task
func (_m *MockTasksRepo) SaveTask(ctx context.Context, task Task) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for SaveTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTasksRepo_SaveTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTask'
type MockTasksRepo_SaveTask_Call struct {
	*mock.Call
}

// SaveTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task Task
func (_e *MockTasksRepo_Expecter) SaveTask(ctx interface{}, task interface{}) *MockTasksRepo_SaveTask_Call {
	return &MockTasksRepo_SaveTask_Call{Call: _e.mock.On("SaveTask", ctx, task)}
}

func (_c *MockTasksRepo_SaveTask_Call) Run(run func(ctx context.Context, task Task)) *MockTasksRepo_SaveTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Task))
	})
	return _c
}

func (_c *MockTasksRepo_SaveTask_Call) Return(_a0 error) *MockTasksRepo_SaveTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTasksRepo_SaveTask_Call) RunAndReturn(run func(context.Context, Task) error) *MockTasksRepo_SaveTask_Call {
	_c.Call.Return(run)
	return _c
}

// SaveTasks provides a mock function with given fields: ctx, _a1
func (_m *MockTasksRepo) SaveTasks(ctx context.Context, _a1 []Task) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveTasks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []Task) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTasksRepo_SaveTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTasks'
type MockTasksRepo_SaveTasks_Call struct {
	*mock.Call
}

// SaveTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 []Task
func (_e *MockTasksRepo_Expecter) SaveTasks(ctx interface{}, _a1 interface{}) *MockTasksRepo_SaveTasks_Call {
	return &MockTasksRepo_SaveTasks_Call{Call: _e.mock.On("SaveTasks", ctx, _a1)}
}

func (_c *MockTasksRepo_SaveTasks_Call) Run(run func(ctx context.Context, _a1 []Task)) *MockTasksRepo_SaveTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]Task))
	})
	return _c
}

func (_c *MockTasksRepo_SaveTasks_Call) Return(_a0 error) *MockTasksRepo_SaveTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTasksRepo_SaveTasks_Call) RunAndReturn(run func(context.Context, []Task) error) *MockTasksRepo_SaveTasks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskById provides a mock function with given fields: ctx, id, params
func (_m *MockTasksRepo) UpdateTaskById(ctx context.Context, id TaskId, params TaskParams) error {
	ret := _m.Called(ctx, id, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, TaskId, TaskParams) error); ok {
		r0 = rf(ctx, id, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTasksRepo_UpdateTaskById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskById'
type MockTasksRepo_UpdateTaskById_Call struct {
	*mock.Call
}

// UpdateTaskById is a helper method to define mock.On call
//   - ctx context.Context
//   - id TaskId
//   - params TaskParams
func (_e *MockTasksRepo_Expecter) UpdateTaskById(ctx interface{}, id interface{}, params interface{}) *MockTasksRepo_UpdateTaskById_Call {
	return &MockTasksRepo_UpdateTaskById_Call{Call: _e.mock.On("UpdateTaskById", ctx, id, params)}
}

func (_c *MockTasksRepo_UpdateTaskById_Call) Run(run func(ctx context.Context, id TaskId, params TaskParams)) *MockTasksRepo_UpdateTaskById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(TaskId), args[2].(TaskParams))
	})
	return _c
}

func (_c *MockTasksRepo_UpdateTaskById_Call) Return(_a0 error) *MockTasksRepo_UpdateTaskById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTasksRepo_UpdateTaskById_Call) RunAndReturn(run func(context.Context, TaskId, TaskParams) error) *MockTasksRepo_UpdateTaskById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTasksRepo creates a new instance of MockTasksRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTasksRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTasksRepo {
	mock := &MockTasksRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
